#include<stdio.h>
int main()
{
	int a[3][4] = { 0 };//是把一整行看成一个元素，二维数组有三个元素，而每一个元素（每一行）又是一个有4个元素的一维数组。
	printf("%d\n", sizeof(a));//48 - a表示整个数组12*4
	printf("%d\n", sizeof(a[0][0]));//4 - a[0][0]下标为0，0的元素
	printf("%d\n", sizeof(a[0]));//16 - a首元素地址，a[0]下标为0的元素，是一整行（一维数组）相当于arr，而单独的arr为整个数组。
	printf("%d\n", sizeof(a[0] + 1));//4/8 - a[0]首元素（第一行的一维数组）arr，相当于arr+1这时arr表第一行首地址arr+1表第一行第二个元素的地址。
	printf("%d\n", sizeof(*(a[0] + 1)));//4 - 对第一行第二个元素的地址解引用得到元素
	printf("%d\n", sizeof(a + 1));//4/8 - a二维数组首地址（第一行的地址），a+1二维数组第二行的地址
	printf("%d\n", sizeof(*(a + 1)));//16 - *（a+1）得到二维数组第二个元素，第二整行。
	printf("%d\n", sizeof(&a[0] + 1));//4/8 - 二维数组第二个元素（第二整行）的地址
	printf("%d\n", sizeof(*(&a[0] + 1)));//16 - *(&a[0] + 1))得到第二整行
	printf("%d\n", sizeof(*a));//16 - a首地址（第一整行的地址），*a得到第一整行
	printf("%d\n", sizeof(a[3]));//16 - a[3]第4个元素（第4整行），但是没有第4行。sizeof（）括号内部的的表达式是不会计算的，它其实不会去访问第4行的内容的，它只是
	//拿到第4行的数组名，而一个数组有自己的类型，可以通过类型计算大小,不需要知道内容。int [4] 数组：4个整形4*4；int* 指针：4/8；int [3][4] 二维数组：12个整形4*12；
	return 0;
}
