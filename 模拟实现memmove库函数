#define _CRT_SECURE_NO_WARNINGS 1

#include<stdio.h>

/*思路：
void* memmove(void* dest, void* scr, int size_t)
可以将源地址向后n个字节拷贝到目的地地址处，而且当两区域相互重叠时也可以实现
只是源字符串会被改变。
a b *c d \e f* &g h\ i j& k l
例如：将*c d e f*目的地字符串 用\e f g h\源字符串改变时，会发现e f 重叠了
这时因为 dest地址小于scr地址 源字符串会发生改变，所以要从左到右依次拷贝，这样重叠部分
先拷贝就不会丢失这部分数据
将&g h i j&用用\e f g h\源字符串改变时dest地址高于scr地址，应从右到左依次拷贝*/

int is_overlap(void* dest, void* scr, int size_t)
{
	int sum = (char*)dest - (char*)scr;

	//重合且dest>scr返回1
	if (0 <= sum && sum < size_t)
	{
		return 1;
	}
	//重合且dest<scr返回-1
	else if (-size_t < sum && sum < 0)
	{
		return -1;
	}
	//未重合返回0
	else
	{
		return 0;
	}
}

void* my_memmove(void* dest, void* scr, int size_t)
{
	void* star = dest;
	int ret = is_overlap(dest, scr, size_t);//先判断dest和scr在size_t个字节内是否重合并且比较dest与scr大小

	if (ret > 0)//返回1表示dest>scr且重合，从右向左拷贝
	{
		int sum = (char*)dest - (char*)scr;//两地址之间的字符数
		char* p = (char*)scr + size_t - 1;//先指向源字符串最后的字符
		int i = 0;
		for (i = 0; i < size_t; i++)
		{
			*(p + sum) = *p;//先拷贝右边字符到目的地
			p--;
		}
	}
	else if (ret < 0)//返回-1表示dest<scr且重合，从左向右拷贝
	{
		int sum = (char*)scr - (char*)dest;
		int i = 0;
		for (i = 0; i < size_t; i++)
		{
			*((char*)scr - sum) = *(char*)scr;//先拷贝左边字符到目的地
			((char*)scr)++;
		}
	}
	else//返回0表示未重合
	{
		int i = 0;
		for (i = 0; i < size_t; i++)
		{
			*((char*)dest) = *((char*)scr);//直接拷贝
			((char*)dest)++;
			((char*)scr)++;
		}
	}
	return star;
}

int main()
{
	int arr[40] = {0,1,2,3,4,5,6};
	my_memmove(arr, arr + 2,12);
	int i = 0;
	for (i = 0; i < 9; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}
