#define _CRT_SECURE_NO_WARNINGS 1

//改造冒泡排序法，使得它可以排序不同类型的数组

#include<stdio.h>
#include<string.h>
//交换函数
void swap(char* buf1, char* buf2, int width)
{
	int i = 0;
	for (i = 0; i < width; i++)
	{
		char tmp = *buf1;
		*buf1 = *buf2;
		*buf2 = tmp;
		buf1++;
		buf2++;
	}
}

//第一个参数：既然要实现不同类型数组的排序，形参就要能接收不同类型的地址，所以使用void*指针。
//第二个参数：冒泡排序绕不开两个循环（趟数和每一趟对比次数），所以应该知道元素个数。
//判断是否交换：
	//难点一：void*base是不能进行base±整数和解引用的，所以要强制类型转换。
	//难点二：在编写Bubblesort函数时，不知道今后使用的人会对什么类型的数组进行排序，所以希望把数组类型也进行传参，这样强制类型转换就可以了。
	//难点三：元素类型是不可以进行传参的。
//第四个参数：所以需要使用者把元素交换方法也作为参数，用一个函数指针接收，该函数的传参是在Bubblesort内部进行，相邻两元素类型不能确定，所以用void*接收。
//第三个参数：
	//因为base不能±整数，所以如何找到相邻元素的地址？
	//char*指针通过±整数，就可以找到每一个字节的地址，其中当然也包括相邻两元素的地址,所以要（char*）base
	//所以需要把待排列数组的元素大小传参。
void Bubblesort(void*base, int sz, int width, int(*cmp)(const void*e1, const void*e2))
{
	int i = 0;
	for (i = 0; i < sz - 1; i++)
	{
		int j = 0;
		for (j = 0; j < sz - i - 1; j++)
		{
			//判断是否交换
			//j*width就能找到相邻元素的地址，再传给cmp。因为char*步长为1，在cmp内部要先把这两个地址强制类型转换为待交换数组元素类型的指针，才能访问正确的字节数。
			if (cmp((((char*)base) + j*width), (((char*)base) + (j + 1)*width))>0)
			{
				//因为char*步长为1，所以应该把元素大小也传过去，一个字节一个字节的交换
				swap(((char*)base) + j*width, ((char*)base) + (j + 1)*width, width);
			}
		}
	}
}

//浮点型元素比较方式
int cmp_float(const void* e1, const void* e2)
{
		if (*(float*)e1 == *(float*)e2)
		{
			return 0;
		}
		else if (*(float*)e1 > *(float*)e2)
		{
			return 1;
		}
		else
		{
			return -1;
		}
}
//浮点型元素比较方式

//结构体型元素比较方式
struct stu
{
	char name[20];
	int age;
};

int cmp_stu_name(const void*e1, const void*e2)
{
	return strcmp(((struct stu*)e1)->name, ((struct stu*)e2)->name);
}
//结构体型元素比较方式

int main()
{
	//**浮点型数组排序**
	//float f[3] = { 3.0, 2.0, 1.0 };
	//int sz = sizeof(f) / sizeof(f[0]);
	//Bubblesort(f,sz,sizeof(f[0]),cmp_float);
	//int i = 0;
	//for (i = 0; i < sz; i++)
	//{
	//	printf("%f ", f[i]);
	//}
	//**浮点型数组排序**

	//**结构体型数组排序
	struct stu s[3] = { { "zhangsan", 30 }, { "lisi", 20 }, { "wangwu", 10 } };
	int sz = sizeof(s) / sizeof(s[0]);
	Bubblesort(s, sz, sizeof(s[0]), cmp_stu_name);
	//**结构体型数组排序

	return 0;
}
