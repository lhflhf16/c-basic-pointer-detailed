#define _CRT_SECURE_NO_WARNINGS 1

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

//排序结构体数组****
struct stu
{
	char name[20];
	int age;
};

//以结构体中name进行排序**** *
int cmp_struct_name(const void* e1, const void* e2)
{
	return strcmp(((struct stu*)e1)->name, ((struct stu*)e2)->name);
	//最后用调试查看结果，lisi， wangwu， zhangsan，因为l，w，z字符的ascii码值，依次增大。
	//strcmp函数的返回值刚好也是1， 0， -1所以可以直接使用其作为cmp_struct_name返回值。
}

void test4()
{
	struct stu s[3] = { { "zhangsan", 30 }, { "lisi", 20 }, { "wangwu", 10 } };
	int sz = sizeof(s) / sizeof(s[0]);
	qsort(s, sz, sizeof(s[0]), cmp_struct_name);
}
//以结构体中name进行排序**** *

//以结构体中age进行排序**** *
int cmp_struct_age(const void* e1, const void* e2)
{
	return (((struct stu*)e1)->age) - (((struct stu*)e2)->age);
}

void test3()
{
	struct stu s[3] = { { "zhangsan", 30 }, { "lisi", 20 }, { "wangwu", 10 } };
	int sz = sizeof(s) / sizeof(s[0]);
	qsort(s, sz, sizeof(s[0]), cmp_struct_age);
	//目前还不会结构体数组打印，所以直接用调试查看
}
//以结构体中age进行排序**** *

//排序结构体数组****


//浮点型数组排序***
int cmp_float(const void* e1, const void* e2)
{
	//return (int)(*(float*)e1 - *(float*)e2);//可以用下面的方法就不用强制类型转换,强制类型转换不好。
	if (*(float*)e1 == *(float*)e2)
	{
		return 0;
	}
	else if (*(float*)e1 > *(float*)e2)
	{
		return 1;
	}
	else
	{
		return -1;
	}
}

void test2()
{
	float f[4] = { 4.0, 3.0, 2.0, 1.0 };
	int sz = sizeof(f) / sizeof(f[0]);
	qsort(f, sz, sizeof(f[0]), cmp_float);
	//我想对浮点型进行排序，当然要在比较函数内部强制类型转换为float*型。
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%f ", f[i]);
	}
}
//浮点型数组排序***


//整型数组排序**
int cmp_int(const void * e1, const void * e2)
{
	return (*(int*)e1 - *(int*)e2);
}

void test1()
{
	int arr[10] = { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	qsort(arr, sz, sizeof(arr[0]), cmp_int);
	//你想给什么类型的数组排序，你就传什么类型的参数，这里只需要改变参数就能实现不同类型数组的排序
	//而想要用冒泡排序去实现不同类型的排序，就要大改函数内部，显然只改参数比较方便
	//qsort快速排序函数，它的参数中有一个函数指针，说明传参时应该传一个函数
	//而这个函数其实和arr，sz，sizeof（arr[0]）,这些参数一样需要自己定义，
	//这里我想给整型数组排序，所以我定义了一个整型数组；
	//同理，我想让两个整形在比较函数cmp中相互比较，在cmp内部就要把两个void*类型的地址
	//强制类型转换为int*。
	//至于cmp的两个参数的传参，是在qsort这个函数内部实现的。
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
}
//整型数组排序**

int main()
{
	//test1();
	//test2();
	//test3();
	test4();
	return 0;
}
